/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-10-13 06:17:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import poly.util.CmmUtil;
import poly.dto.UserDto;

public final class UserList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("poly.dto.UserDto");
    _jspx_imports_classes.add("poly.util.CmmUtil");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	List<UserDto> rList = (List<UserDto>) request.getAttribute("rList");

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div class=\"UserList\">\n");
      out.write("\t\t<table border='1' id=\"UserList\">\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<td>User ID</td>\n");
      out.write("\t\t\t\t<td>User NAME</td>\n");
      out.write("\n");
      out.write("\t\t\t</tr>\n");
      out.write("\n");
      out.write("\t\t\t");

				for (UserDto e : rList) {
			
      out.write("\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<td>");
      out.print(e.getUser_id());
      out.write("</td>\n");
      out.write("\t\t\t\t<td>");
      out.print(e.getName());
      out.write("</td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t");

				}
			
      out.write("\n");
      out.write("\t\t</table>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("<script>\n");
      out.write("\tfunction UserList() {\n");
      out.write("\t\t//alert(\"test\");\n");
      out.write("\t\tvar user_id = $('#user_id').val();\n");
      out.write("\t\t//alert(\"제목 : \" + post_title);\n");
      out.write("\t\tif ($('#user_id').val() == \"\") {\n");
      out.write("\t\t\t$('#user_id').focus();\n");
      out.write("\t\t\treturn false;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tconsole.log(\"user_id : \" + user_id);\n");
      out.write("\n");
      out.write("\t\t$.ajax({\n");
      out.write("\t\t\turl : '/user/UserList',\n");
      out.write("\t\t\ttype : 'user',\n");
      out.write("\t\t\tdata : {\n");
      out.write("\t\t\t\t\"user_id\" : user_id\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tsuccess : function(data) {\n");
      out.write("\t\t\t\tconsole.log(\"test\");\n");
      out.write("\t\t\t\tconsole.log(data)\n");
      out.write("\n");
      out.write("\t\t\t\tvar resHTML = \"\";\n");
      out.write("\t\t\t\tresHTML += '<tr>';\n");
      out.write("\t\t\t\tresHTML += '<td>User_ID</td>';\n");
      out.write("\t\t\t\tresHTML += '<td>User NAME</td>';\n");
      out.write("\t\t\t\tresHTML += '</tr>';\n");
      out.write("\n");
      out.write("\t\t\t\tif (data.length == 0) {\n");
      out.write("\n");
      out.write("\t\t\t\t\tresHTML += '<tr>';\n");
      out.write("\t\t\t\t\tresHTML += '<td>-</td>';\n");
      out.write("\t\t\t\t\tresHTML += '<td>-</td>';\n");
      out.write("\t\t\t\t\tresHTML += '</tr>';\n");
      out.write("\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t\t\tfor (var i = 0; i < data.length; i++) {\n");
      out.write("\t\t\t\t\t\tresHTML += '<tr>';\n");
      out.write("\t\t\t\t\t\tresHTML += '<td>' + data[i].user_id + '</td>';\n");
      out.write("\t\t\t\t\t\tresHTML += '<td>' + data[i].name + '</td>';\n");
      out.write("\t\t\t\t\t\tresHTML += '</tr>';\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\t$(\"#UserList\").html(resHTML);\n");
      out.write("\n");
      out.write("\t\t\t}\n");
      out.write("\t\t})\n");
      out.write("\t}\n");
      out.write("</script>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
